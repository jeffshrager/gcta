;;; ********* WARNING: UPDATE FOR NEW FORMAT OF MUTICON XLS FILES********

;;; (load (compile-file "reshape.lisp"))

;;; (loop for k being the hash-keys of *t* using (hash-value v) do (print (list k v)))
;;; Just a hack to reshuffle results

(defparameter
  *vtbs*
  '(
    (0 "[2 3 4]" "[2 21 41]" "[2 3 4]" "[2 28 41]" "[2 3 21]" "[2 3 1]" "[2 21 41]" "[2 31 41]" "[2 31 41]" "[2 31 41]")
    (1 "[10 9 48]" "[10 43 50]" "[32 4 10]" "[10 48 9]" "[10 43 4]" "[10 32 48]" "[9 32 48]" "[10 32 43]" "[10 32 9]" "[10 32 48]")
    (2 "[4 28 12]" "[28 4 55]" "[28 4 12]" "[28 4 12]" "[28 4 55]" "[28 4 55]" "[28 4 2]" "[28 4 55]" "[28 4 2]" "[28 4 12]")
    (3 "[9 45 37]" "[9 37 45]" "[9 37 45]" "[9 37 45]" "[45 37 9]" "[45 9 37]" "[9 45 37]" "[45 37 9]" "[9 37 45]" "[37 9 45]")
    (4 "[33 36 20]" "[36 20 45]" "[33 36 6]" "[33 36 6]" "[33 20 45]" "[36 33 6]" "[33 36 29]" "[36 7 45]" "[33 36 29]" "[33 7 45]")
    (5 "[51 14 36]" "[51 14 36]" "[51 14 13]" "[51 14 13]" "[51 14 36]" "[51 13 14]" "[51 14 45]" "[51 14 27]" "[51 14 13]" "[51 14 45]")
    (6 "[22 17 43]" "[22 43 17]" "[22 43 9]" "[22 9 17]" "[22 9 43]" "[22 9 43]" "[22 43 17]" "[22 17 43]" "[22 17 43]" "[22 43 17]")
    (7 "[20 33 57]" "[20 33 12]" "[20 33 12]" "[20 33 12]" "[20 33 12]" "[20 33 12]" "[20 33 55]" "[20 33 57]" "[20 33 57]" "[20 12 33]")
    (8 "[23 41 5]" "[23 41 36]" "[23 41 5]" "[23 41 52]" "[23 41 5]" "[23 41 36]" "[23 41 5]" "[23 41 5]" "[23 41 17]" "[23 41 5]")
    (9 "[53 20 32]" "[53 45 14]" "[53 46 45]" "[53 10 24]" "[53 54 46]" "[53 45 54]" "[53 20 24]" "[53 46 54]" "[53 54 46]" "[53 20 23]")
    (10 "[3 48 23]" "[3 19 8]" "[3 19 48]" "[3 19 43]" "[3 19 5]" "[3 19 8]" "[3 8 19]" "[3 19 48]" "[3 19 43]" "[3 19 43]")
    (11 "[22 8 45]" "[22 8 41]" "[8 22 45]" "[22 8 41]" "[22 8 41]" "[22 45 8]" "[22 41 8]" "[22 8 45]" "[22 8 45]" "[22 8 41]")
    (12 "[17 9 24]" "[17 9 46]" "[17 9 46]" "[9 17 46]" "[17 24 46]" "[17 9 46]" "[9 24 46]" "[9 24 46]" "[9 17 46]" "[17 24 46]")
    (13 "[17 39 60]" "[17 39 26]" "[17 39 60]" "[17 39 60]" "[17 26 39]" "[17 39 26]" "[17 39 60]" "[17 39 26]" "[17 39 26]" "[17 26 39]")
    (14 "[1 8 39]" "[8 1 3]" "[8 1 3]" "[1 45 31]" "[1 8 3]" "[1 8 54]" "[8 45 30]" "[1 54 31]" "[1 8 3]" "[1 54 39]")
    (15 "[41 39 19]" "[41 39 19]" "[41 39 19]" "[41 39 19]" "[41 39 19]" "[41 39 19]" "[41 39 19]" "[41 39 18]" "[41 39 19]" "[41 39 19]")
    (16 "[31 2 27]" "[31 2 43]" "[31 2 51]" "[31 2 51]" "[31 2 43]" "[31 2 27]" "[31 2 43]" "[31 2 43]" "[31 2 51]" "[31 2 43]")
    (17 "[7 20 19]" "[7 19 33]" "[7 33 55]" "[7 33 55]" "[7 33 18]" "[7 33 55]" "[7 33 20]" "[7 33 19]" "[7 33 55]" "[7 19 18]")
    (18 "[43 19 17]" "[43 19 17]" "[43 19 17]" "[43 17 19]" "[43 19 17]" "[43 17 32]" "[43 19 17]" "[43 17 19]" "[43 19 18]" "[43 19 17]")
    (19 "[16 35 58]" "[16 58 35]" "[16 35 58]" "[7 35 58]" "[35 58 16]" "[16 35 58]" "[16 35 58]" "[58 16 35]" "[16 35 58]" "[16 58 35]")
    (20 "[19 3 40]" "[19 40 48]" "[19 40 3]" "[19 20 40]" "[19 40 5]" "[19 40 3]" "[19 20 40]" "[19 40 20]" "[19 40 20]" "[19 40 55]")
    (21 "[54 36 45]" "[54 45 39]" "[54 39 51]" "[54 51 39]" "[54 39 1]" "[54 36 45]" "[54 36 13]" "[54 51 36]" "[54 51 36]" "[54 40 39]")
    (22 "[8 3 1]" "[3 8 31]" "[8 31 59]" "[8 3 1]" "[8 31 41]" "[8 3 1]" "[8 27 59]" "[8 31 51]" "[8 3 31]" "[3 8 31]")
    (23 "[24 18 26]" "[18 24 55]" "[24 26 18]" "[18 28 41]" "[26 24 28]" "[18 28 55]" "[24 26 28]" "[18 24 41]" "[24 18 55]" "[28 24 18]")
    (24 "[11 40 55]" "[11 51 40]" "[11 40 51]" "[55 11 40]" "[11 51 55]" "[51 11 40]" "[40 51 11]" "[11 40 51]" "[55 11 40]" "[51 55 11]")
    (25 "[25 17 54]" "[25 17 31]" "[25 39 31]" "[25 17 54]" "[25 17 54]" "[25 54 17]" "[25 54 31]" "[25 17 54]" "[25 17 54]" "[25 54 17]")
    (26 "[23 44 6]" "[23 44 6]" "[23 44 6]" "[44 23 6]" "[23 44 6]" "[44 23 6]" "[23 44 6]" "[23 44 6]" "[23 44 6]" "[23 44 6]")
    (27 "[17 22 52]" "[17 22 8]" "[17 22 41]" "[17 22 41]" "[17 22 52]" "[17 22 55]" "[17 22 41]" "[17 22 41]" "[17 22 52]" "[17 22 55]")
    (28 "[44 45 40]" "[45 44 40]" "[45 44 53]" "[44 1 36]" "[44 1 36]" "[44 45 53]" "[44 45 53]" "[44 45 40]" "[44 1 40]" "[44 1 36]")
    (29 "[24 55 32]" "[24 32 55]" "[24 50 32]" "[24 50 6]" "[24 55 6]" "[24 55 50]" "[24 32 55]" "[24 55 50]" "[24 55 32]" "[24 32 55]")
    (30 "[54 20 28]" "[54 19 28]" "[54 19 28]" "[54 20 28]" "[54 43 20]" "[54 43 19]" "[54 19 28]" "[54 20 28]" "[54 20 28]" "[54 20 43]")
    (31 "[53 40 20]" "[20 40 53]" "[53 40 20]" "[20 40 53]" "[20 40 53]" "[20 53 40]" "[40 20 53]" "[40 53 20]" "[20 40 53]" "[53 20 40]")
    (32 "[54 53 29]" "[54 53 29]" "[54 29 53]" "[54 29 5]" "[54 29 53]" "[54 29 5]" "[54 29 53]" "[54 29 53]" "[54 53 29]" "[54 29 53]")
    (33 "[44 48 33]" "[44 33 3]" "[44 45 22]" "[44 33 3]" "[44 33 3]" "[45 44 48]" "[44 45 33]" "[44 45 33]" "[44 3 33]" "[44 33 3]")
    (34 "[3 59 47]" "[3 47 29]" "[59 3 47]" "[59 47 29]" "[3 47 59]" "[59 3 47]" "[3 47 32]" "[3 47 32]" "[3 47 59]" "[59 47 3]")
    (35 "[2 55 8]" "[2 55 8]" "[2 55 8]" "[55 4 2]" "[2 55 37]" "[2 55 37]" "[2 55 37]" "[2 55 37]" "[2 55 8]" "[55 17 2]")
    (36 "[11 45 37]" "[11 45 37]" "[11 45 37]" "[11 45 37]" "[45 11 43]" "[11 45 37]" "[45 11 37]" "[45 11 37]" "[11 45 42]" "[11 45 37]")
    (37 "[3 45 27]" "[3 36 27]" "[3 36 27]" "[3 27 36]" "[3 27 45]" "[3 45 36]" "[3 27 36]" "[3 36 27]" "[3 45 36]" "[3 27 36]")
    (38 "[33 44 57]" "[33 44 12]" "[33 44 57]" "[33 44 12]" "[33 44 27]" "[33 44 57]" "[33 44 57]" "[33 44 12]" "[33 44 12]" "[33 44 12]")
    (39 "[7 4 2]" "[7 4 2]" "[7 38 55]" "[4 7 38]" "[7 4 2]" "[4 38 55]" "[4 7 38]" "[7 4 2]" "[4 38 55]" "[7 4 38]")
    (40 "[24 1 27]" "[1 24 27]" "[27 24 3]" "[1 24 52]" "[1 24 52]" "[1 27 24]" "[1 27 24]" "[1 24 27]" "[27 24 1]" "[24 27 1]")
    (41 "[11 26 55]" "[11 26 55]" "[11 24 55]" "[55 39 24]" "[11 55 39]" "[24 28 26]" "[26 11 39]" "[41 26 24]" "[24 41 55]" "[24 41 11]")
    (42 "[39 50 16]" "[50 39 32]" "[39 50 32]" "[39 50 32]" "[39 50 32]" "[39 50 32]" "[50 39 32]" "[39 50 15]" "[39 50 5]" "[50 32 39]")
    (43 "[36 6 43]" "[36 6 10]" "[36 6 9]" "[36 6 10]" "[36 6 10]" "[36 6 9]" "[36 6 54]" "[36 6 10]" "[36 6 9]" "[36 6 10]")
    (44 "[44 38 7]" "[44 38 35]" "[44 38 7]" "[44 38 7]" "[38 44 7]" "[38 44 7]" "[38 7 44]" "[44 38 7]" "[44 38 7]" "[44 38 7]")
    (45 "[31 6 52]" "[31 6 20]" "[31 6 20]" "[31 6 22]" "[31 23 20]" "[31 6 52]" "[31 6 23]" "[31 6 52]" "[31 6 22]" "[31 6 52]")
    (46 "[41 29 5]" "[19 29 60]" "[19 60 5]" "[5 60 41]" "[29 19 60]" "[19 29 60]" "[19 29 41]" "[19 60 5]" "[41 19 5]" "[29 5 19]")
    (47 "[16 50 35]" "[16 47 50]" "[16 47 27]" "[16 47 36]" "[16 50 27]" "[16 47 50]" "[16 47 50]" "[16 50 47]" "[16 50 47]" "[16 50 47]")
    (48 "[6 16 56]" "[6 16 44]" "[6 56 35]" "[6 16 56]" "[6 16 56]" "[6 16 44]" "[6 16 12]" "[6 16 12]" "[6 16 44]" "[6 16 44]")
    (49 "[47 41 23]" "[47 41 23]" "[47 41 23]" "[47 23 5]" "[47 41 23]" "[47 23 1]" "[47 41 23]" "[47 41 23]" "[47 41 23]" "[47 41 23]")
    (50 "[6 19 20]" "[20 19 6]" "[19 45 22]" "[19 45 22]" "[6 20 19]" "[19 20 6]" "[6 45 22]" "[20 45 22]" "[19 20 6]" "[6 19 20]")
    (51 "[23 48 43]" "[23 48 19]" "[23 48 19]" "[23 48 19]" "[23 48 43]" "[23 48 19]" "[23 43 48]" "[23 48 52]" "[23 48 52]" "[23 48 52]")
    (52 "[31 9 56]" "[31 20 47]" "[31 20 45]" "[31 20 45]" "[31 20 56]" "[31 20 47]" "[31 20 26]" "[31 20 47]" "[31 20 47]" "[31 20 47]")
    (53 "[27 15 56]" "[35 27 16]" "[27 35 56]" "[27 15 56]" "[27 35 16]" "[27 43 17]" "[27 15 56]" "[27 35 16]" "[27 35 17]" "[35 27 15]")
    (54 "[40 29 20]" "[29 20 40]" "[20 40 29]" "[29 20 40]" "[29 20 45]" "[40 29 20]" "[20 29 45]" "[20 29 45]" "[40 29 20]" "[40 20 29]")
    (55 "[7 27 5]" "[7 23 27]" "[7 27 23]" "[27 7 23]" "[7 27 23]" "[27 7 23]" "[27 7 23]" "[7 27 47]" "[7 27 41]" "[7 27 23]")
    (56 "[15 39 19]" "[20 15 21]" "[15 39 44]" "[20 39 41]" "[20 15 19]" "[15 20 39]" "[15 20 19]" "[20 39 53]" "[20 15 39]" "[20 15 39]")
    (57 "[26 47 2]" "[26 47 2]" "[26 38 35]" "[26 35 38]" "[26 47 2]" "[26 38 35]" "[26 38 35]" "[26 38 35]" "[26 35 38]" "[26 35 38]")
    (58 "[58 48 60]" "[58 23 1]" "[58 23 1]" "[58 48 23]" "[58 60 48]" "[58 30 23]" "[58 23 60]" "[58 60 30]" "[58 23 30]" "[58 30 14]")
    (59 "[16 23 58]" "[16 58 23]" "[16 30 58]" "[16 30 58]" "[16 23 58]" "[16 58 23]" "[16 30 23]" "[16 23 58]" "[16 30 58]" "[16 23 58]")
    (60 "[26 28 55]" "[28 26 37]" "[28 26 37]" "[26 28 37]" "[26 55 2]" "[26 55 2]" "[28 55 7]" "[28 26 55]" "[28 26 37]" "[26 28 39]")
    (61 "[28 1 30]" "[28 1 51]" "[28 1 51]" "[28 51 30]" "[28 31 51]" "[28 1 51]" "[28 31 30]" "[28 32 30]" "[28 30 1]" "[28 1 51]")
    (62 "[38 1 50]" "[38 1 50]" "[38 1 50]" "[38 1 47]" "[38 1 50]" "[38 1 23]" "[38 1 23]" "[38 1 50]" "[38 1 47]" "[38 1 50]")
    (63 "[35 26 40]" "[35 55 12]" "[55 35 40]" "[26 55 35]" "[26 35 40]" "[40 55 7]" "[55 35 26]" "[40 55 26]" "[26 40 55]" "[26 55 14]")
    (64 "[39 4 59]" "[32 39 4]" "[32 39 25]" "[39 4 48]" "[39 32 25]" "[39 32 4]" "[39 4 48]" "[39 32 4]" "[39 32 4]" "[39 32 25]")
    (65 "[50 3 19]" "[50 3 13]" "[50 3 19]" "[50 3 29]" "[50 41 13]" "[50 3 19]" "[50 3 13]" "[50 3 41]" "[50 54 3]" "[50 3 41]")
    (66 "[5 28 50]" "[13 50 36]" "[13 5 50]" "[13 5 47]" "[5 13 50]" "[13 5 50]" "[13 5 50]" "[13 5 50]" "[5 13 50]" "[5 13 50]")
    (67 "[19 30 23]" "[19 30 56]" "[30 19 56]" "[19 30 23]" "[30 23 19]" "[30 19 56]" "[19 30 23]" "[19 30 56]" "[30 19 23]" "[30 19 5]")
    (68 "[30 46 10]" "[30 36 29]" "[30 36 29]" "[30 29 46]" "[30 46 36]" "[30 26 36]" "[30 26 36]" "[30 46 26]" "[30 46 13]" "[30 46 26]")
    (69 "[31 47 54]" "[31 54 47]" "[31 54 47]" "[31 54 47]" "[31 54 19]" "[31 54 47]" "[31 54 47]" "[31 54 47]" "[31 54 47]" "[31 54 19]")
    (70 "[35 19 53]" "[30 19 38]" "[30 35 19]" "[35 30 38]" "[38 19 53]" "[35 38 30]" "[35 19 53]" "[38 30 35]" "[35 30 53]" "[30 38 35]")
    (71 "[48 50 38]" "[48 9 50]" "[48 7 50]" "[48 50 38]" "[9 48 38]" "[9 48 50]" "[48 50 38]" "[48 9 23]" "[48 9 38]" "[48 9 23]")
    (72 "[40 22 26]" "[26 2 52]" "[40 26 22]" "[2 22 52]" "[40 26 22]" "[52 26 22]" "[22 40 26]" "[40 4 52]" "[26 2 52]" "[26 2 52]")
    (73 "[56 31 30]" "[56 31 30]" "[31 56 35]" "[31 56 16]" "[56 31 35]" "[31 56 30]" "[56 27 30]" "[56 31 27]" "[31 56 16]" "[56 31 35]")
    (74 "[23 41 29]" "[23 41 29]" "[23 41 19]" "[23 41 19]" "[23 41 19]" "[23 41 19]" "[23 41 19]" "[23 41 19]" "[23 41 19]" "[23 41 19]")
    (75 "[22 9 43]" "[22 43 9]" "[22 9 43]" "[22 9 43]" "[22 43 9]" "[22 43 9]" "[22 9 43]" "[22 43 9]" "[22 43 9]" "[22 43 9]")
    (76 "[56 47 38]" "[38 43 45]" "[28 56 26]" "[56 28 26]" "[26 47 6]" "[28 26 45]" "[28 43 47]" "[28 56 43]" "[28 43 6]" "[38 43 9]")
    (77 "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]" "[31 51 10]")
    (78 "[15 53 38]" "[9 53 38]" "[53 15 46]" "[53 15 9]" "[15 53 37]" "[53 15 46]" "[15 53 37]" "[15 53 46]" "[53 15 9]" "[15 53 38]")
    (79 "[48 41 22]" "[48 22 7]" "[48 41 23]" "[48 22 23]" "[23 41 7]" "[48 22 23]" "[23 41 7]" "[48 22 41]" "[48 23 7]" "[48 41 23]")
    (80 "[48 38 31]" "[48 38 31]" "[48 38 31]" "[48 38 31]" "[48 38 31]" "[48 38 31]" "[48 38 31]" "[48 31 38]" "[48 38 4]" "[48 38 31]")
    (81 "[38 27 3]" "[38 27 26]" "[38 3 44]" "[38 27 26]" "[38 27 3]" "[38 27 26]" "[38 3 44]" "[38 3 44]" "[38 3 44]" "[38 27 3]")
    (82 "[9 54 37]" "[6 9 29]" "[9 54 6]" "[9 6 54]" "[9 6 56]" "[6 54 29]" "[9 6 54]" "[9 56 39]" "[9 6 54]" "[9 56 36]")
    (83 "[2 4 14]" "[2 14 4]" "[2 4 14]" "[2 23 52]" "[2 4 14]" "[2 23 52]" "[2 23 52]" "[14 23 52]" "[2 23 52]" "[2 23 52]")
    (84 "[44 59 7]" "[59 44 7]" "[44 59 7]" "[44 59 52]" "[44 59 7]" "[59 44 7]" "[59 44 7]" "[44 7 37]" "[59 44 7]" "[59 44 7]")
    (85 "[30 50 46]" "[30 50 1]" "[30 50 1]" "[30 50 16]" "[30 50 16]" "[30 50 46]" "[30 50 29]" "[30 50 1]" "[30 50 16]" "[30 50 1]")
    (86 "[22 9 21]" "[22 45 9]" "[22 21 9]" "[22 9 45]" "[22 9 45]" "[22 45 9]" "[22 21 45]" "[22 9 21]" "[22 9 21]" "[22 21 9]")
    (87 "[22 9 20]" "[22 9 19]" "[22 9 20]" "[22 9 20]" "[22 9 20]" "[22 9 19]" "[22 9 20]" "[22 9 20]" "[22 9 20]" "[22 9 20]")
    (88 "[26 51 43]" "[26 43 1]" "[26 60 51]" "[26 43 1]" "[26 46 43]" "[26 60 1]" "[26 60 46]" "[26 60 1]" "[26 46 1]" "[26 51 60]")
    (89 "[1 30 56]" "[1 56 30]" "[1 60 54]" "[1 30 60]" "[1 56 30]" "[1 30 54]" "[56 1 54]" "[1 60 3]" "[1 30 54]" "[1 30 3]")
    (90 "[17 55 14]" "[55 17 14]" "[55 17 14]" "[55 17 14]" "[17 55 14]" "[17 55 24]" "[17 55 14]" "[55 17 14]" "[55 17 14]" "[17 55 14]")
    (91 "[45 40 6]" "[45 40 6]" "[51 45 40]" "[51 40 6]" "[51 45 44]" "[51 40 6]" "[45 51 44]" "[45 51 44]" "[45 51 44]" "[45 51 44]")
    (92 "[9 26 56]" "[26 9 10]" "[26 9 22]" "[26 9 10]" "[9 26 22]" "[9 26 56]" "[26 22 10]" "[9 26 56]" "[9 22 56]" "[9 26 56]")
    (93 "[5 38 47]" "[5 38 47]" "[5 38 47]" "[5 6 16]" "[5 6 16]" "[5 6 16]" "[5 6 47]" "[5 38 47]" "[5 47 27]" "[5 6 38]")
    (94 "[6 52 30]" "[6 52 23]" "[6 52 23]" "[6 52 23]" "[6 52 23]" "[6 52 23]" "[6 52 23]" "[6 52 23]" "[6 52 23]" "[6 52 23]")
    (95 "[48 25 38]" "[48 25 38]" "[48 12 38]" "[48 12 25]" "[48 25 38]" "[48 25 38]" "[48 12 38]" "[48 38 12]" "[48 12 38]" "[48 12 25]")
    (96 "[60 1 26]" "[60 1 26]" "[60 1 26]" "[60 1 26]" "[60 1 54]" "[60 1 26]" "[60 26 1]" "[60 1 26]" "[60 1 26]" "[60 1 26]")
    (97 "[42 8 55]" "[42 8 60]" "[8 42 60]" "[8 42 60]" "[8 42 22]" "[8 60 31]" "[8 42 31]" "[8 42 31]" "[42 8 60]" "[8 42 60]")
    (98 "[9 40 7]" "[9 40 6]" "[9 40 55]" "[9 40 36]" "[9 40 36]" "[9 40 7]" "[9 40 7]" "[9 40 46]" "[9 40 49]" "[9 40 36]")
    (99 "[26 9 43]" "[26 9 28]" "[26 9 28]" "[26 9 43]" "[26 9 28]" "[26 9 28]" "[26 9 28]" "[26 9 43]" "[26 9 46]" "[26 9 43]")
    ))

(defparameter *scorekeys*
  '(("tailharmpws" . "ssfr") ("all1pws" . "ssfr") ("randpws" . "ssfr")
    ("tailharmpws" . "ltgt") ("all1pws" . "ltgt") ("randpws" . "ltgt")
    ))

(defun string-split (string &key (delimiter #\space))
  (let ((substrings '())
        (length (length string))
        (last 0))
    (flet ((add-substring (i)
             (push (subseq string last i) substrings)))
      (dotimes (i length)
        (when (eq (char string i) delimiter)
          (add-substring i)
          (setq last (1+ i))))
      (add-substring length)
      (nreverse substrings))))

(defun nthpart (n f)
  (nth n (string-split f :delimiter #\_)))

(defvar *t* (make-hash-table :test #'equal))
(defvar *keys* nil)

(setf *print-pretty* nil *print-length* nil)

(defun reshape-idperms (pattern outfile column maxlines)
  (clrhash *t*)
  (setf *keys* nil)
  (loop for fn in (mapcar #'pathname-name (directory pattern))
	as l = (nthpart 5 fn)
	as pws = (nthpart 6 fn)
	as rule = (nthpart 7 fn)
	as key = (list l pws rule)
	do (with-open-file
	    (i (format nil "results/~a.xls" fn))
	    (push key *keys*)
	    (setf (gethash key *t*)
		  (loop for line = (string-split (read-line i nil) :delimiter #\tab)
			until (null (nth (1- column) line))
			collect line))))
  ;; Combine into a master file...
  (with-open-file
   (o outfile :direction :output :if-exists :supersede)
   (loop for key in *keys*
	 do (format o "~a:~a	" (car key) (reformat-key (cons (cadr key) (caddr key)))))
   (format o "~%")
   (loop for i below maxlines ;; UUU
	 do (loop for key in *keys*
		  do (format o "~2$	" (let ((v (nth (1- column) (nth i (gethash key *t*)))))
					    (if v (read-from-string v) "NaN"))))
	 (format o "~%")))
  )

;;; Depends on having *t* pre-loaded by reshape-idperms!

(defun texify-3-wide-idperms ()
  (reshape-idperms "results/*idperms_3*.xls" "results/idps3.xls" 2 1500) ;; Sets up *t*
  (with-open-file
   (o "results/idptables.tex" :direction :output :if-exists :supersede)
   (format o "~%\\begin{longtable}{| l | l || l | l || l | l || l | l || l | l || l | l |}~%\\hline~%")
   (loop for key in *scorekeys*
	 with p = nil
	 do
	 (if p (format o " & ") (setf p t))
	 (format o "\\multicolumn{2}{|c|}{\\textbf{~a}}" (reformat-key key))
	 finally (format o "\\\\~%\\hline~%"))
   (loop for n below (length (gethash '("3" "randpws" "ssfr") *t*)) ;; Use this as a proxy for all (???)
	 do 
	 (loop for key in *scorekeys*
	       with p = nil
	       as (id score) = (nth n (gethash (list "3" (car key) (cdr key)) *t*))
	       do
	       (if p (format o " & ") (setf p t))
	       (format o "~a & ~2$ " id (read-from-string score))
	       finally (format o "\\\\~%\\hline~%")))
   (format o "\\end{longtable}~%~%")
   )
  )

(defun texify-multicons ()
  (error "********* WARNING: UPDATE FOR NEW FORMAT OF MUTICON XLS FILES********")
  (clrhash *t*)
  (loop for file in (mapcar #'pathname-name (directory "results/*multicon*.xls"))
	as (a b c d e f g h i j) = (string-split file :delimiter #\_)
	do (setf (gethash (cons g h) *t*)
		 (with-open-file
		  (i (format nil "results/~a.xls" file))
		  (loop for line = (read-line i nil nil)
			until (null line)
			collect (let* ((s (string-split line :delimiter #\tab))
				       (a (parse-integer (first s)))
				       (b (fancy-score (second s))))
				  (cons a b))))))
  (with-open-file
   (o "results/vtbtables.tex" :direction :output :if-exists :supersede)
   (format o "~%\\begin{longtable}{| l || l | l | l | l | l | l | }~%")
   (loop for key in *scorekeys*
	 as i from 1 by 1
	 do (format o "& ~a " (reformat-key key))
	 (when (= i 3) (format o "\\\\~%\\hline~%")))
   (format o "\\\\~%\\hline~%\\end{longtable}~%~%")
   (format o "~%\\begin{longtable}{| l || l | l | l | l | l | l | }~%")
   (loop for (n . js) in *vtbs*
	 do (format o "~%\\hline~%~a " n)
	 (loop for j in js
	       as i from 1 by 1
	       do (format o " & ~a" j)
	       (when (= i 5) (format o " \\\\~%"))
	       )
	 (format o "\\\\~%\\hline~%")
	 (loop for key in *scorekeys*
	       as i from 1 by 1
	       as vs = (cdr (assoc n (gethash key *t*)))
	       do (format o "& ~a " vs)
	       (when (= i 3) (format o "\\\\~%\\hline~%"))
	       finally (format o "\\\\~%\\hline~%")
	       ))
   (format o "\\end{longtable}~%")
   (format o "\\begin{longtable}{l l l}")
   (loop for k being the hash-keys of *t*
	 using (hash-value v)
	 do
	 (setq v (reverse v))
	 (format o "~a\\\\ ~%" (reformat-key k))
	 (format o " & Near & ~{~a, ~} ...\\\\~%" (reformat-scores (first-n 6 v)))
	 (format o " & Far & ... ~{~a, ~} \\\\~%\\hline~%\\hline~%\\smallskip~%" (reformat-scores (reverse (first-n 6 (reverse v)))))
	 )
   (format o "\\end{longtable}~%")
   ))

(defun first-n (n l) (loop for i below n as j in l collect j))

(defun reformat-key (key) (format nil "~a.~a" (car key) (cdr key)))

(defun reformat-scores (ss) (loop for (a . b) in ss collect (format nil "~a=~a" a b)))

(defun fancy-score (s)
  (let ((s (read-from-string s)))
    (if (= 0.0 s)
	;;(format nil "{\\color{red}~2$}" s)
	(format nil "~2$" s) ;; temporarily dyked
      (format nil "~2$" s))))

;;; (Don't call the file "...idperm..." or the dir will sweep it in!)
;(reshape-idperms "results/*idperm*.xls" "results/allidps.xls" 2 1500)
;(reshape-idperms "results/*mvtbcdistest*.xls" "results/allcdistest.xls" 3 10000)

;(texify-3-wide-idperms)

;;; (reshape-multicons reuses *t* for its own purposes)
;(texify-multicons)

